package com.hbm.lib;

import com.hbm.handler.GunConfiguration;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundEvent;
import net.minecraftforge.fml.common.registry.ForgeRegistries;

import java.util.ArrayList;
import java.util.List;

public final class HBMSoundHandler {

    public static List<SoundEvent> ALL_SOUNDS = new ArrayList<SoundEvent>();

    public static SoundEvent alarmGambit;
    public static SoundEvent assemblerOperate;
    public static SoundEvent b92Reload;
    public static SoundEvent ballsLaser;
    public static SoundEvent bang;
    public static SoundEvent battery;
    public static SoundEvent blockDebris;
    public static SoundEvent blood_splat;
    public static SoundEvent boatWeapon;
	public static SoundEvent boltGun;
    public static SoundEvent bombDet;
    public static SoundEvent bombWhistle;
    public static SoundEvent bomberLoop;
    public static SoundEvent bomberSmallLoop;
    public static SoundEvent bonk;
    public static SoundEvent broadcast1;
    public static SoundEvent broadcast2;
    public static SoundEvent broadcast3;
    public static SoundEvent buttonNo;
    public static SoundEvent buttonYes;
    public static SoundEvent calShoot;
    public static SoundEvent centrifugeOperate;
    public static SoundEvent chainsaw;
    public static SoundEvent chekhov_fire;
    public static SoundEvent chemplantOperate;
    public static SoundEvent chime;
    public static SoundEvent chopperCharge;
    public static SoundEvent chopperCrashingLoop;
    public static SoundEvent chopperDamage;
    public static SoundEvent chopperDrop;
    public static SoundEvent chopperFlyingLoop;
    public static SoundEvent chopperMineLoop;
    public static SoundEvent chungus_lever;
    public static SoundEvent ciwsFiringLoop;
    public static SoundEvent ciwsSpindown;
    public static SoundEvent ciwsSpinup;
    public static SoundEvent closeDoor;
    public static SoundEvent cough;
    public static SoundEvent crateBreak;
    public static SoundEvent crucibleEnd;
    public static SoundEvent crucibleLoop;
    public static SoundEvent crucibleStart;
    public static SoundEvent crucibleSwing;
    public static SoundEvent cryolatorShoot;
    public static SoundEvent cybercrab;
    public static SoundEvent dartShoot;
    public static SoundEvent deagleShoot;
    public static SoundEvent defabShoot;
    public static SoundEvent defabSpinup;
    public static SoundEvent dflash;
    public static SoundEvent ducc;
    public static SoundEvent fatmanReload;
    public static SoundEvent fatmanShoot;
    public static SoundEvent fel;
    public static SoundEvent flamerReload;
    public static SoundEvent flamethrowerIgnite;
    public static SoundEvent flamethrowerShoot;
    public static SoundEvent follyAquired;
    public static SoundEvent follyBuzzer;
    public static SoundEvent follyClose;
    public static SoundEvent follyFire;
    public static SoundEvent follyOpen;
    public static SoundEvent follyReload;
    public static SoundEvent fstbmbPing;
    public static SoundEvent fstbmbStart;
    public static SoundEvent gasmaskScrew;
    public static SoundEvent geiger1;
    public static SoundEvent geiger2;
    public static SoundEvent geiger3;
    public static SoundEvent geiger4;
    public static SoundEvent geiger5;
    public static SoundEvent geiger6;
    public static SoundEvent geiger7;
    public static SoundEvent geiger8;
    public static SoundEvent glauncher;
    public static SoundEvent gluonEnd;
    public static SoundEvent gluonHit;
    public static SoundEvent gluonLoop;
    public static SoundEvent gluonStart;
    public static SoundEvent grenadeBounce;
    public static SoundEvent heavyShoot;
    public static SoundEvent hit_dirt;
    public static SoundEvent hit_flesh;
    public static SoundEvent hit_metal;
    public static SoundEvent hkShoot;
    public static SoundEvent hksShoot;
    public static SoundEvent howard_fire;
    public static SoundEvent howard_reload;
    public static SoundEvent immolatorIgnite;
    public static SoundEvent immolatorShoot;
    public static SoundEvent itemUnpack;
    public static SoundEvent jeremy_fire;
    public static SoundEvent jeremy_reload;
    public static SoundEvent jetpack;
    public static SoundEvent jetpackTank;
    public static SoundEvent jsg_reload0;
    public static SoundEvent jsg_reload1;
    public static SoundEvent kaping;
    public static SoundEvent lacunaeShoot;
    public static SoundEvent lacunaeSpindown;
    public static SoundEvent lacunaeSpinup;
    public static SoundEvent laserBang;
    public static SoundEvent leverActionReload;
    public static SoundEvent lockHang;
    public static SoundEvent lockOpen;
    public static SoundEvent megaquacc;
    public static SoundEvent missileAssembly2;
    public static SoundEvent missileTakeoff;
    public static SoundEvent mob_gib;
    public static SoundEvent mukeExplosion;
    public static SoundEvent nullChopper;
    public static SoundEvent nullCrashing;
    public static SoundEvent nullMine;
    public static SoundEvent nullRadar;
    public static SoundEvent nullTau;
    public static SoundEvent oldExplosion;
    public static SoundEvent openDoor;
    public static SoundEvent osiprCharging;
    public static SoundEvent osiprReload;
    public static SoundEvent osiprShoot;
    public static SoundEvent pinBreak;
    public static SoundEvent pinUnlock;
    public static SoundEvent pipePlaced;
    public static SoundEvent planeCrash;
    public static SoundEvent planeShotDown;
    public static SoundEvent potatOSRandom;
    public static SoundEvent pressOperate;
    public static SoundEvent quadroReload;
    public static SoundEvent radawayUse;
    public static SoundEvent railgunCharge;
    public static SoundEvent railgunFire;
    public static SoundEvent railgunOrientation;
    public static SoundEvent rbmkLid;
    public static SoundEvent rbmk_az5_cover;
    public static SoundEvent rbmk_explosion;
    public static SoundEvent reactorStart;
    public static SoundEvent reactorStop;
    public static SoundEvent reloadGrenade;
    public static SoundEvent reloadMag;
    public static SoundEvent reloadRevolver;
    public static SoundEvent reloadRifle;
    public static SoundEvent reloadShotgun;
    public static SoundEvent reloadTurret;
    public static SoundEvent repair;
    public static SoundEvent revolverShoot;
    public static SoundEvent revolverShootAlt;
    public static SoundEvent richard_fire;
    public static SoundEvent ricochet;
    public static SoundEvent rifleShoot;
    public static SoundEvent rocketEngine;
    public static SoundEvent rocketFlame;
    public static SoundEvent rocketTakeoff;
    public static SoundEvent rpgReload;
    public static SoundEvent rpgShoot;
    public static SoundEvent sauerGun;
    public static SoundEvent sawShoot;
    public static SoundEvent schrabidiumShoot;
    public static SoundEvent screm;
    public static SoundEvent shotgunShoot;
    public static SoundEvent shottyShoot;
    public static SoundEvent shutdown;
    public static SoundEvent silencerShoot;
    public static SoundEvent siloclose;
    public static SoundEvent siloopen;
    public static SoundEvent singFlyby;
    public static SoundEvent slice;
    public static SoundEvent slicer;
    public static SoundEvent sonarPing;
    public static SoundEvent soyuzReady;
    public static SoundEvent soyuzTakeOff;
    public static SoundEvent sparkShoot;
    public static SoundEvent spray;
    public static SoundEvent stingerLockon;
    public static SoundEvent stop;
    public static SoundEvent syringeUse;
    public static SoundEvent tauChargeLoop2;
    public static SoundEvent tauChargeLoop;
    public static SoundEvent tauShoot;
    public static SoundEvent techBleep;
    public static SoundEvent techBoop;
    public static SoundEvent tesla;
    public static SoundEvent teslaShoot;
    public static SoundEvent trainHorn;
    public static SoundEvent turbofanOperate;
    public static SoundEvent ufoBeam;
    public static SoundEvent ufoBlast;
    public static SoundEvent upgradePlug;
    public static SoundEvent uziShoot;
    public static SoundEvent vaultScrapeNew;
    public static SoundEvent vaultThudNew;
    public static SoundEvent vice;
    public static SoundEvent voices1;
    public static SoundEvent voices2;
    public static SoundEvent voices3;
    public static SoundEvent voices4;
    public static SoundEvent voices5;
    public static SoundEvent voices6;
    public static SoundEvent voices7;
    public static SoundEvent voices8;
    public static SoundEvent vomit;
    public static SoundEvent weaponSpinDown;
    public static SoundEvent weaponSpinUp;
    public static SoundEvent whack;
    public static SoundEvent zomgShoot;

    public static SoundEvent transitionSealOpen;
    public static SoundEvent garage;
    public static SoundEvent garage_stop;
    public static SoundEvent door_spinny;
    public static SoundEvent wgh_big_start;
    public static SoundEvent wgh_big_stop;
    public static SoundEvent wgh_start;
    public static SoundEvent wgh_stop;
    public static SoundEvent alarm6;
    public static SoundEvent qe_sliding_shut;
    public static SoundEvent qe_sliding_opened;
    public static SoundEvent qe_sliding_opening;
    public static SoundEvent hatch_open;
    public static SoundEvent sliding_seal_open;
    public static SoundEvent sliding_seal_stop;

    public static SoundEvent alarmHatch = registerBypass("alarm.hatch");
    public static SoundEvent alarmAutopilot = registerBypass("alarm.autopilot");
    public static SoundEvent alarmAMSSiren = registerBypass("alarm.amsSiren");
    public static SoundEvent alarmBlastDoor = registerBypass("alarm.blastDoorAlarm");
    public static SoundEvent alarmAPCLoop = registerBypass("alarm.apcLoop");
    public static SoundEvent alarmKlaxon = registerBypass("alarm.klaxon");
    public static SoundEvent alarmFoKlaxonA = registerBypass("alarm.foKlaxonA");
    public static SoundEvent alarmFoKlaxonB = registerBypass("alarm.foKlaxonB");
    public static SoundEvent alarmRegular = registerBypass("alarm.regularSiren");
    public static SoundEvent alarmClassic = registerBypass("alarm.classic");
    public static SoundEvent alarmBank = registerBypass("alarm.bankAlarm");
    public static SoundEvent alarmBeep = registerBypass("alarm.beepSiren");
    public static SoundEvent alarmContainer = registerBypass("alarm.containerAlarm");
    public static SoundEvent alarmSweep = registerBypass("alarm.sweepSiren");
    public static SoundEvent alarmStrider = registerBypass("alarm.striderSiren");
    public static SoundEvent alarmAirRaid = registerBypass("alarm.airRaid");
    public static SoundEvent alarmNostromo = registerBypass("alarm.nostromoSiren");
    public static SoundEvent alarmEas = registerBypass("alarm.easAlarm");
    public static SoundEvent alarmAPCPass = registerBypass("alarm.apcPass");
    public static SoundEvent alarmRazorTrain = registerBypass("alarm.razortrainHorn");
    public static SoundEvent soyuzed = registerBypass("alarm.soyuzed");
    public static SoundEvent metalStep = registerBypass("step.metal");
    public static SoundEvent iron = registerBypass("step.iron");
    public static SoundEvent ironLand = registerBypass("step.iron_land");
    public static SoundEvent ironJump = registerBypass("step.iron_jump");
    public static SoundEvent poweredStep = registerBypass("step.powered");

    public static SoundEvent lambdaCore = registerBypass("music.recordlambdacore");
    public static SoundEvent sectorSweep = registerBypass("music.recordsectorsweep");
    public static SoundEvent vortalCombat = registerBypass("music.recordvortalcombat");
    public static SoundEvent glass = registerBypass("music.transmission");

    public static SoundEvent metalBlock = registerBypass("step.metalBlock");

    public static SoundEvent[] geigerSounds;
    public static SoundEvent[] voiceSounds;


    public static void init() {


        alarm6 = register("block.door.alarm6");
        alarmGambit = register("alarm.gambit");
        assemblerOperate = register("block.assembleroperate");
        b92Reload = register("weapon.b92Reload");
        ballsLaser = register("weapon.ballsLaser");
        bang = register("weapon.bang");
        battery = register("item.battery");
        blockDebris = register("block.debris");
        blood_splat = register("weapon.blood_splat");
        boatWeapon = register("weapon.boat");
        bombDet = register("entity.bombDet");
        bombWhistle = register("entity.bombWhistle");
        bomberLoop = register("entity.bomberLoop");
        bomberSmallLoop = register("entity.bomberSmallLoop");
        bonk = register("weapon.bonk");
		boltGun = register("item.boltgun");
        broadcast1 = register("block.broadcast1");
        broadcast2 = register("block.broadcast2");
        broadcast3 = register("block.broadcast3");
        buttonNo = register("block.buttonNo");
        buttonYes = register("block.buttonYes");
        calShoot = register("weapon.calShoot");
        centrifugeOperate = register("block.centrifugeOperate");
        chainsaw = register("weapon.chainsaw");
        chekhov_fire = register("turret.chekhov_fire");
        chemplantOperate = register("block.chemplantOperate");
        chime = register("alarm.chime");
        chopperCharge = register("entity.chopperCharge");
        chopperCrashingLoop = register("entity.chopperCrashingLoop");
        chopperDamage = register("entity.chopperDamage");
        chopperDrop = register("entity.chopperDrop");
        chopperFlyingLoop = register("entity.chopperFlyingLoop");
        chopperMineLoop = register("entity.chopperMineLoop");
        chungus_lever = register("block.chungusLever");
        ciwsFiringLoop = register("weapon.ciwsFiringLoop");
        ciwsSpindown = register("weapon.ciwsSpindown");
        ciwsSpinup = register("weapon.ciwsSpinup");
        closeDoor = register("block.closeDoor");
        cough = register("player.cough");
        crateBreak = register("block.crateBreak");
        crucibleEnd = register("weapon.crucible_end");
        crucibleLoop = register("weapon.crucible_loop");
        crucibleStart = register("weapon.crucible_start");
        crucibleSwing = register("weapon.crucible_swing");
        cryolatorShoot = register("weapon.cryolatorShoot");
        cybercrab = register("entity.cybercrab");
        dartShoot = register("weapon.dartShoot");
        deagleShoot = register("weapon.deagleShoot");
        defabShoot = register("weapon.defabShoot");
        defabSpinup = register("weapon.defabSpinup");
        dflash = register("weapon.dFlash");
        door_spinny = register("block.door.lever");
        ducc = register("entity.ducc");
        fatmanShoot = register("weapon.fatmanShoot");
        fel = register("block.fel");
        flamerReload = register("weapon.flamerReload");
        flamethrowerIgnite = register("weapon.flamethrowerIgnite");
        flamethrowerShoot = register("weapon.flamethrowerShoot");
        follyAquired = register("weapon.follyAquired");
        follyBuzzer = register("weapon.follyBuzzer");
        follyClose = register("weapon.follyClose");
        follyFire = register("weapon.follyFire");
        follyOpen = register("weapon.follyOpen");
        follyReload = register("weapon.follyReload");
        fstbmbPing = register("weapon.fstbmbPing");
        fstbmbStart = register("weapon.fstbmbStart");
        garage = register("block.door.garage");
        garage_stop = register("block.door.garagestop");
        gasmaskScrew = register("item.gasmaskScrew");
        geiger1 = register("item.geiger1");
        geiger2 = register("item.geiger2");
        geiger3 = register("item.geiger3");
        geiger4 = register("item.geiger4");
        geiger5 = register("item.geiger5");
        geiger6 = register("item.geiger6");
        geiger7 = register("item.geiger7");
        geiger8 = register("item.geiger8");
        glauncher = register("weapon.glauncher");
        gluonEnd = register("weapon.gluonend");
        gluonHit = register("weapon.gluonhit");
        gluonLoop = register("weapon.gluonloop");
        gluonStart = register("weapon.gluonstart");
        grenadeBounce = register("weapon.gBounce");
        hatch_open = register("block.door.hatch_open");
        heavyShoot = register("weapon.heavyShoot");
        hit_dirt = register("weapon.hit_dirt");
        hit_flesh = register("weapon.hit_flesh");
        hit_metal = register("weapon.hit_metal");
        hkShoot = register("weapon.hkShoot");
        hksShoot = register("weapon.hksShoot");
        howard_fire = register("turret.howard_fire");
        howard_reload = register("turret.howard_reload");
        immolatorIgnite = register("weapon.immolatorIgnite");
        immolatorShoot = register("weapon.immolatorShoot");
        itemUnpack = register("item.unpack");
        jeremy_fire = register("turret.jeremy_fire");
        jeremy_reload = register("turret.jeremy_reload");
        jetpack = register("weapon.jetpack");
        jetpackTank = register("item.jetpackTank");
        jsg_reload0 = register("weapon.jsg_reload0");
        jsg_reload1 = register("weapon.jsg_reload1");
        kaping = register("weapon.kapeng");
        lacunaeShoot = register("weapon.lacunaeShoot");
        lacunaeSpindown = register("weapon.lacunaeSpindown");
        lacunaeSpinup = register("weapon.lacunaeSpinup");
        laserBang = register("weapon.laserBang");
        leverActionReload = register("weapon.leverActionReload");
        lockHang = register("block.lockHang");
        lockOpen = register("block.lockOpen");
        megaquacc = register("entity.megaquacc");
        missileAssembly2 = register("block.missileAssembly2");
        missileTakeoff = register("weapon.missileTakeOff");
        mob_gib = register("weapon.mob_gib");
        mukeExplosion = register("weapon.mukeExplosion");
        nullChopper = register("misc.nullChopper");
        nullCrashing = register("misc.nullCrashing");
        nullMine = register("misc.nullMine");
        nullRadar = register("misc.nullRadar");
        nullTau = register("misc.nullTau");
        oldExplosion = register("entity.oldExplosion");
        openDoor = register("block.openDoor");
        osiprCharging = register("weapon.osiprCharging");
        osiprReload = register("weapon.osiprReload");
        osiprShoot = register("weapon.osiprShoot");
        pinBreak = register("item.pinBreak");
        pinUnlock = register("item.pinUnlock");
        pipePlaced = register("block.pipePlaced");
        planeCrash = register("entity.planeCrash");
        planeShotDown = register("entity.planeShotDown");
        potatOSRandom = register("potatos.random");
        pressOperate = register("block.pressoperate");
        qe_sliding_opened = register("block.door.qe_sliding_opened");
        qe_sliding_opening = register("block.door.qe_sliding_opening");
        qe_sliding_shut = register("block.door.qe_sliding_shut");
        quadroReload = register("weapon.quadroReload");
        radawayUse = register("item.radaway");
        railgunCharge = register("block.railgunCharge");
        railgunFire = register("block.railgunFire");
        railgunOrientation = register("block.railgunOrientation");
        rbmkLid = register("block.rbmkLid");
        rbmk_az5_cover = register("block.rbmk_az5_cover");
        rbmk_explosion = register("block.rbmk_explosion");
        reactorStart = register("block.reactorStart");
        reactorStop = register("block.reactorStop");
        reloadTurret = register("weapon.reloadTurret");
        repair = register("item.repair");
        revolverShoot = register("weapon.revolverShoot");
        revolverShootAlt = register("weapon.revolverShootAlt");
        richard_fire = register("turret.richard_fire");
        ricochet = register("weapon.ricochet");
        rifleShoot = register("weapon.rifleShoot");
        rocketEngine = register("entity.rocketEngine");
        rocketFlame = register("weapon.rocketFlame");
        rocketTakeoff = register("entity.rocketTakeoff");
        rpgShoot = register("weapon.rpgShoot");
        sauerGun = register("weapon.sauergun");
        sawShoot = register("weapon.sawShoot");
        schrabidiumShoot = register("weapon.schrabidiumShoot");
        screm = register("block.screm");
        shotgunShoot = register("weapon.shotgunShoot");
        shottyShoot = register("weapon.shottyShoot");
        shutdown = register("block.shutdown");
        silencerShoot = register("weapon.silencerShoot");
        siloclose = register("block.door.siloclose");
        siloopen = register("block.door.siloopen");
        singFlyby = register("weapon.singFlyby");
        slice = register("weapon.slice");
        slicer = register("entity.slicer");
        sliding_seal_open = register("block.door.sliding_seal_open");
        sliding_seal_stop = register("block.door.sliding_seal_stop");
        sonarPing = register("block.sonarPing");
        soyuzReady = register("block.soyuzReady");
        soyuzTakeOff = register("entity.soyuzTakeoff");
        sparkShoot = register("weapon.sparkShoot");
        spray = register("item.spray");
        stingerLockon = register("weapon.stingerLockOn");
        stop = register("weapon.stop");
        syringeUse = register("item.syringe");
        tauChargeLoop = register("weapon.tauChargeLoop");
        tauChargeLoop2 = register("weapon.tauChargeLoop2");
        tauShoot = register("weapon.tauShoot");
        techBleep = register("item.techBleep");
        techBoop = register("item.techBoop");
        tesla = register("weapon.tesla");
        teslaShoot = register("weapon.teslaShoot");
        trainHorn = register("alarm.trainhorn");
        transitionSealOpen = register("block.door.transitionseal");
        turbofanOperate = register("block.turbofanOperate");
        ufoBeam = register("entity.ufoBeam");
        ufoBlast = register("entity.ufoBlast");
        upgradePlug = register("item.upgradePlug");
        uziShoot = register("weapon.uziShoot");
        vaultScrapeNew = register("block.vaultScrapeNew");
        vaultThudNew = register("block.vaultThudNew");
        vice = register("item.vice");
        voices1 = register("item.voices1");
        voices2 = register("item.voices2");
        voices3 = register("item.voices3");
        voices4 = register("item.voices4");
        voices5 = register("item.voices5");
        voices6 = register("item.voices6");
        voices7 = register("item.voices7");
        voices8 = register("item.voices8");
        vomit = register("entity.vomit");
        weaponSpinDown = register("weapon.spindown");
        weaponSpinUp = register("weapon.spinup");
        wgh_big_start = register("block.door.wgh_big_start");
        wgh_big_stop = register("block.door.wgh_big_stop");
        wgh_start = register("block.door.wgh_start");
        wgh_stop = register("block.door.wgh_stop");
        whack = register("weapon.whack");
        zomgShoot = register("weapon.zomgShoot");

		GunConfiguration.RSOUND_FATMAN = fatmanReload = register("weapon.fatmanReload");
		GunConfiguration.RSOUND_GRENADE = reloadGrenade = register("weapon.hkReload");
		GunConfiguration.RSOUND_LAUNCHER = rpgReload = register("weapon.rpgReload");
		GunConfiguration.RSOUND_MAG = reloadMag = register("weapon.magReload");
		GunConfiguration.RSOUND_REVOLVER = reloadRevolver = register("weapon.revolverReload");
		GunConfiguration.RSOUND_RIFLE = reloadRifle = register("");
		GunConfiguration.RSOUND_SHOTGUN = reloadShotgun = register("weapon.shotgunReload");

        geigerSounds = new SoundEvent[]{geiger1, geiger2, geiger3, geiger4, geiger5, geiger6, geiger7, geiger8};
        voiceSounds = new SoundEvent[]{voices1, voices2, voices3, voices4, voices5, voices6, voices7, voices8};
    }

    public static SoundEvent register(String name) {
        SoundEvent e = new SoundEvent(new ResourceLocation(RefStrings.MODID, name));
        e.setRegistryName(name);
        ALL_SOUNDS.add(e);
        return e;
    }

    public static SoundEvent registerBypass(String name) {
        SoundEvent e = new SoundEvent(new ResourceLocation(RefStrings.MODID, name));
        e.setRegistryName(name);
        ForgeRegistries.SOUND_EVENTS.register(e);
        return e;
    }

}
